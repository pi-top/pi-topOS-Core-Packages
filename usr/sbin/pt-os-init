#!/bin/sh

get_variables() {
    ROOT_PART_DEV=$(findmnt / -o source -n)
    ROOT_PART_NAME=$(echo "$ROOT_PART_DEV" | cut -d "/" -f 3)
    ROOT_DEV_NAME=$(echo /sys/block/*/"${ROOT_PART_NAME}" | cut -d "/" -f 4)
    ROOT_DEV="/dev/${ROOT_DEV_NAME}"
    ROOT_PART_NUM=$(cat "/sys/block/${ROOT_DEV_NAME}/${ROOT_PART_NAME}/partition")

    OLD_DISKID=$(fdisk -l "$ROOT_DEV" | sed -n 's/Disk identifier: 0x\([^ ]*\)/\1/p')

    ROOT_DEV_SIZE=$(cat "/sys/block/${ROOT_DEV_NAME}/size")
    TARGET_END=$((ROOT_DEV_SIZE - 1))

    PARTITION_TABLE=$(parted -m "$ROOT_DEV" unit s print | tr -d 's')

    EXT_PART_LINE=$(echo "$PARTITION_TABLE" | grep ":::;" | head -n 1)
    EXT_PART_NUM=$(echo "$EXT_PART_LINE" | cut -d ":" -f 1)
}

fix_partuuid() {
    DISKID="$(fdisk -l "$ROOT_DEV" | sed -n 's/Disk identifier: 0x\([^ ]*\)/\1/p')"

    sed -i "s/${OLD_DISKID}/${DISKID}/g" /etc/fstab
    sed -i "s/${OLD_DISKID}/${DISKID}/" /boot/cmdline.txt
}

expand_filesystem() {
    get_variables

    # Note the Yes in the command to confirm the message:
    # Warning: Partition /dev/mmcblk0p2 is being used. Are you sure you want to continue?
    # This is not required in the second call

    # Resize extended partition
    echo Yes | parted "${ROOT_DEV}" ---pretend-input-tty resizepart "${EXT_PART_NUM}" "${TARGET_END}"s

    # Resize rootfs partition
    parted "${ROOT_DEV}" ---pretend-input-tty <<EOF
resizepart
${ROOT_PART_NUM}
${TARGET_END}s
quit
EOF

    partprobe "$ROOT_DEV"
    fix_partuuid
    resize2fs "$ROOT_PART_DEV"

    return 0
}

do_not_timeout_oled() {
  # Load kernel modules to perform i2c operations
  modprobe i2c-bcm2835
  modprobe i2c-dev

  if i2cping 0x11; then
      # If pi-top[4], avoid OLED from timing out.
      # Put hub into shutdown mode 5 to display the rotating 4 in the OLED.
      register_read="$(i2cget -y 1 0x11 0xA0 c)"
      mode5_mask="0x38"
      byte_to_write="$((register_read | mode5_mask))"
      i2cset -y 1 0x11 0xA0 "${byte_to_write}"
  fi
}

do_mount_all() {
  mount -t devtmpfs none /dev
  mount -t proc proc /proc
  mount -t sysfs sys /sys
  mount -t tmpfs tmp /run
  mkdir -p /run/systemd

  mount /boot
  mount / -o remount,ro
  sync
}

do_expand() {
  mount /boot -o remount,ro

  echo 1 > /proc/sys/kernel/sysrq
  expand_filesystem >>/dev/null
}

do_prepare() {
  sed -i -e "s| init=[^ ]*||g" /boot/cmdline.txt
  echo "$(cat /boot/cmdline.txt) init=/sbin/pt-os-init" >/boot/cmdline.txt
}

do_enable_wifi_card() {
  # This function creates a wpa_suppplicant.conf file in /boot.
  # This will cause 'raspberrypi-net-mods' systemd service to be triggered on
  # boot, copying over the file to /etc/wpa_supplicant and most importantly,
  # enabling the wireless card so that AP mode runs on first boot.

  mount /boot -o remount,rw
  mount / -o remount,ro

  if [ ! -f /boot/wpa_supplicant.conf ]; then
    if [ -f /etc/wpa_supplicant/wpa_supplicant.conf ]; then
        cp /etc/wpa_supplicant/wpa_supplicant.conf /boot/wpa_supplicant.conf
    else
        echo "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1" > /boot/wpa_supplicant.conf
    fi
  fi
}

do_clean_cmdline() {
  mount /boot -o remount,rw

  if ! grep -q splash /boot/cmdline.txt; then
     sed -i "s| quiet||g" /boot/cmdline.txt
  fi
  sed -i "s| init=/sbin/pt-os-init||" /boot/cmdline.txt
  sed -i "s| fbcon=map:2||g" /boot/cmdline.txt
}

do_finish_and_reboot() {
  umount /boot
  mount / -o remount,ro
  sync
  reboot -f
}

if [ "$#" -eq 0 ]; then
  do_mount_all
  do_not_timeout_oled
  do_expand
  do_enable_wifi_card
  do_clean_cmdline
  do_finish_and_reboot
elif [ "$1" = "prepare" ]; then
  do_prepare
fi
