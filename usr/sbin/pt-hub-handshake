#!/usr/bin/python3

from subprocess import run

import click
from pitop.common.bitwise_ops import set_bits_high, set_bits_low
from pitop.common.i2c_device import I2CDevice
from pitop.common.logger import PTLogger


@click.command()
@click.option(
    "--log-level",
    type=int,
    help="set logging level from 10 (more verbose) to 50 (less verbose)",
    default=20,
    show_default=True,
)
@click.option("--cleanup")
@click.version_option()
def main(log_level, cleanup):
    PTLogger.setup_logging(logger_name="pt-hub-handshake", logging_level=log_level)

    PTLogger.info("Loading kernel modules to perform I2C operations...")
    run(["/usr/sbin/modprobe", "i2c-bcm2835"])
    run(["/usr/sbin/modprobe", "i2c-dev"])

    if run(["i2cping", "0x11"]).returncode != 0:
        PTLogger.warning("0x11 I2C ping did not respond - exiting...")
        return False

    PTLogger.info("Connecting to I2C device...")
    try:
        i2c_device = I2CDevice("/dev/i2c-1", 0x11)
        i2c_device.set_delays(0.001, 0.001)
        i2c_device.connect()
    except Exception as e:
        PTLogger.warning("Unable to read from hub (v3) over i2c: " + str(e))
        return False

    PTLogger.info("Checking device ID...")
    ID__PART_NAME_REG = 0xE5
    pi_top_4_part_name = 0x0607

    if hex(i2c_device.read_unsigned_word(ID__PART_NAME_REG)) != hex(pi_top_4_part_name):
        PTLogger.warning("Device ID not correct - exiting...")
        return False

    PTLogger.info("Correct Device ID")

    ID__MCU_SOFT_VERS_MAJOR = 0xE0
    if int(i2c_device.read_unsigned_byte(ID__MCU_SOFT_VERS_MAJOR)) > 3:
        PTLogger.warning("Hub: entering mode 5")

        PWR__SHUTDOWN_CTRL_REG = 0xA0
        full_byte = i2c_device.read_unsigned_byte(PWR__SHUTDOWN_CTRL_REG)
        full_byte = set_bits_low(0b00010000, full_byte)
        full_byte = set_bits_high(0b00101000, full_byte)
        i2c_device.write_byte(PWR__SHUTDOWN_CTRL_REG, full_byte)
    else:
        CTRL__UI_OLED_CTRL_REG = 0x14

        if cleanup:
            action = "take"
            byte_change_func = set_bits_low
        else:
            action = "give"
            byte_change_func = set_bits_high

        PTLogger.warning(f"Requesting hub to {action} OLED control to Pi")
        full_byte = i2c_device.read_unsigned_byte(CTRL__UI_OLED_CTRL_REG)
        full_byte = byte_change_func(1, full_byte)
        i2c_device.write_byte(CTRL__UI_OLED_CTRL_REG, full_byte)

    PTLogger.info("Done!")
    return True


if __name__ == "__main__":
    exit(not main(prog_name="pt-hub-handshake"))  # pragma: no cover
