#!/bin/bash

# shellcheck disable=SC2091
$(return 0 >/dev/null 2>&1) || (echo "Please do not run this directly - source it instead." && exit 1)

parse_partition_table() {
  ROOT_PART_DEV=$(findmnt / -o source -n)
  ROOT_PART_NAME=$(echo "$ROOT_PART_DEV" | cut -d "/" -f 3)
  ROOT_DEV_NAME=$(echo /sys/block/*/"${ROOT_PART_NAME}" | cut -d "/" -f 4)
  ROOT_DEV="/dev/${ROOT_DEV_NAME}"
  ROOT_PART_NUM=$(cat "/sys/block/${ROOT_DEV_NAME}/${ROOT_PART_NAME}/partition")

  ROOT_DEV_SIZE=$(cat "/sys/block/${ROOT_DEV_NAME}/size")
  TARGET_END=$((ROOT_DEV_SIZE - 1))

  PARTITION_TABLE=$(parted -m "$ROOT_DEV" unit s print | tr -d 's')

  EXT_PART_LINE=$(echo "$PARTITION_TABLE" | grep ":::;" | head -n 1)
  EXT_PART_NUM=$(echo "$EXT_PART_LINE" | cut -d ":" -f 1)
}

expand_filesystem() {
  parse_partition_table

  # Note the Yes in the command to confirm the message:
  # Warning: Partition /dev/mmcblk0p2 is being used. Are you sure you want to continue?
  # This is not required in the second call

  # Resize extended partition
  echo Yes | parted "${ROOT_DEV}" ---pretend-input-tty resizepart "${EXT_PART_NUM}" "${TARGET_END}"s

  # Resize rootfs partition
  parted "${ROOT_DEV}" ---pretend-input-tty <<EOF
resizepart
${ROOT_PART_NUM}
${TARGET_END}s
quit
EOF

  partprobe "$ROOT_DEV"

  resize2fs "$ROOT_PART_DEV"

  return 0
}

load_i2c_modules() {
  # Load kernel modules to perform i2c operations
  modprobe i2c-bcm2835
  modprobe i2c-dev
}

mount_virtual_fs() {
  mount -t devtmpfs none /dev
  mount -t proc proc /proc
  mount -t sysfs sys /sys
  mount -t tmpfs tmp /tmp
  mount -t tmpfs tmp /run
  mkdir -p /run/systemd
  sync
}

mount_fs() {
  mount /boot
  mount / -o remount,ro
  sync
}

make_boot_writable() {
  mount /boot -o remount,rw
}

mount_all() {
  mount_virtual_fs
  mount_fs
}

expand() {
  mount /boot -o remount,ro

  echo 1 >/proc/sys/kernel/sysrq
  expand_filesystem >>/dev/null
}

remove_init() {
  make_boot_writable
  sed -i -e "s| init=[^ ]*||g" /boot/cmdline.txt
}

prepare_init() {
  script_path=${1:-}

  remove_init
  echo "$(cat /boot/cmdline.txt) init=${script_path}" >/boot/cmdline.txt
}

enable_wifi_card() {
  # This function creates a wpa_suppplicant.conf file in /boot.
  # This will cause 'raspberrypi-net-mods' systemd service to be triggered on
  # boot, copying over the file to /etc/wpa_supplicant and most importantly,
  # enabling the wireless card so that AP mode runs on first boot.

  make_boot_writable
  mount / -o remount,ro

  if [ ! -f /boot/wpa_supplicant.conf ]; then
    if [ -f /etc/wpa_supplicant/wpa_supplicant.conf ]; then
      cp /etc/wpa_supplicant/wpa_supplicant.conf /boot/wpa_supplicant.conf
    else
      echo "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1" >/boot/wpa_supplicant.conf
    fi
  fi
}

clean_cmdline() {
  make_boot_writable

  if ! grep -q splash /boot/cmdline.txt; then
    sed -i "s| quiet||g" /boot/cmdline.txt
  fi
  sed -i "s| fbcon=map:2||g" /boot/cmdline.txt
}

finish_and_reboot() {
  umount /boot
  mount / -o remount,ro
  sync
  reboot -f
}
