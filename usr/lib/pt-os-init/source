#!/bin/bash

# shellcheck disable=SC2091
$(return 0 >/dev/null 2>&1) || (echo "Please do not run this directly - source it instead." && exit 1)

parse_partition_table() {
  ROOT_PART_DEV=$(findmnt / -o source -n)
  ROOT_PART_NAME=$(echo "$ROOT_PART_DEV" | cut -d "/" -f 3)
  ROOT_DEV_NAME=$(echo /sys/block/*/"${ROOT_PART_NAME}" | cut -d "/" -f 4)
  ROOT_DEV="/dev/${ROOT_DEV_NAME}"
  ROOT_PART_NUM=$(cat "/sys/block/${ROOT_DEV_NAME}/${ROOT_PART_NAME}/partition")

  ROOT_DEV_SIZE=$(cat "/sys/block/${ROOT_DEV_NAME}/size")
  TARGET_END=$((ROOT_DEV_SIZE - 1))

  PARTITION_TABLE=$(parted -m "$ROOT_DEV" unit s print | tr -d 's')

  EXT_PART_LINE=$(echo "$PARTITION_TABLE" | grep ":::;" | head -n 1)
  EXT_PART_NUM=$(echo "$EXT_PART_LINE" | cut -d ":" -f 1)
}

find_boot_mount_point() {
  # don't consider '.recovery' partition
  BOOT_MOUNTPOINTS=$(grep /boot /etc/fstab 2>/dev/null | grep -v '.recovery' | awk '{print $2}' || true)
  if [ -z "$BOOT_MOUNTPOINTS" ]; then
    BOOT_MOUNTPOINTS="/boot"
  fi
  echo "$BOOT_MOUNTPOINTS" | head -n1
}

load_i2c_modules() {
  # Load kernel modules to perform i2c operations
  modprobe i2c-bcm2835
  modprobe i2c-dev
}

mount_virtual_fs() {
  mount -t devtmpfs none /dev
  mount -t proc proc /proc
  mount -t sysfs sys /sys
  mount -t tmpfs tmp /tmp
  mount -t tmpfs tmp /run
  mkdir -p /run/systemd
  sync
}

mount_fs() {
  mount / -o remount,ro
  [ -z "${BOOT_MOUNTPOINT}" ] && BOOT_MOUNTPOINT=$(find_boot_mount_point)
  mkdir -p "${BOOT_MOUNTPOINT}"
  mount "${BOOT_MOUNTPOINT}"
  sync
}

mount_fs_rw() {
  mount / -o remount,rw
  [ -z "${BOOT_MOUNTPOINT}" ] && BOOT_MOUNTPOINT=$(find_boot_mount_point)
  mkdir -p "${BOOT_MOUNTPOINT}"
  mount "${BOOT_MOUNTPOINT}" -o remount,rw
}

mount_all() {
  mount_virtual_fs
  mount_fs
}

expand() {
  echo 1 >/proc/sys/kernel/sysrq
  {
    parse_partition_table

    # Note the Yes in the command to confirm the message:
    # Warning: Partition /dev/mmcblk0p2 is being used. Are you sure you want to continue?
    # This is not required in the second call

    # Resize extended partition
    echo Yes | parted "${ROOT_DEV}" ---pretend-input-tty resizepart "${EXT_PART_NUM}" "${TARGET_END}"s

    # Resize rootfs partition
    parted "${ROOT_DEV}" ---pretend-input-tty <<EOF
resizepart
${ROOT_PART_NUM}
${TARGET_END}s
quit
EOF

    partprobe "$ROOT_DEV"

    resize2fs "$ROOT_PART_DEV"

    return 0
  } # &>/dev/null
}

set_next_init() {
  script_path=${1:-}

  mount_fs_rw
  [ -z "${BOOT_MOUNTPOINT}" ] && BOOT_MOUNTPOINT=$(find_boot_mount_point)

  sed -i -e "s| init=[^ ]*||g" "${BOOT_MOUNTPOINT}"/cmdline.txt
  echo "$(cat ${BOOT_MOUNTPOINT}/cmdline.txt) init=${script_path}" >"${BOOT_MOUNTPOINT}"/cmdline.txt
}

enable_wifi_card() {
  # This function creates a wpa_suppplicant.conf file in $BOOT_MOUNTPOINT.
  # This will cause 'raspberrypi-net-mods' systemd service to be triggered on
  # boot, copying over the file to /etc/wpa_supplicant and most importantly,
  # enabling the wireless card so that AP mode runs on first boot.

  mount_fs_rw
  [ -z "${BOOT_MOUNTPOINT}" ] && BOOT_MOUNTPOINT=$(find_boot_mount_point)


  if [ ! -f "${BOOT_MOUNTPOINT}"/wpa_supplicant.conf ]; then
    if [ -f /etc/wpa_supplicant/wpa_supplicant.conf ]; then
      cp /etc/wpa_supplicant/wpa_supplicant.conf "${BOOT_MOUNTPOINT}"/wpa_supplicant.conf
    else
      echo "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1" >"${BOOT_MOUNTPOINT}"/wpa_supplicant.conf
    fi
  fi
}

add_to_cmdline_txt() {
  mount_fs_rw
  [ -z "${BOOT_MOUNTPOINT}" ] && BOOT_MOUNTPOINT=$(find_boot_mount_point)

  echo "$(cat ${BOOT_MOUNTPOINT}/cmdline.txt) ${1}" >"${BOOT_MOUNTPOINT}"/cmdline.txt
}

remove_from_cmdline_txt() {
  mount_fs_rw
  [ -z "${BOOT_MOUNTPOINT}" ] && BOOT_MOUNTPOINT=$(find_boot_mount_point)

  sed -i "s| ${1}||g" "${BOOT_MOUNTPOINT}"/cmdline.txt
}

enable_text_redirect() {
  remove_from_cmdline_txt "fbcon=map:2"
  add_to_cmdline_txt "fbcon=map:2"
}

disable_text_redirect() {
  remove_from_cmdline_txt "fbcon=map:2"
}

remove_init() {
  mount_fs_rw
  [ -z "${BOOT_MOUNTPOINT}" ] && BOOT_MOUNTPOINT=$(find_boot_mount_point)

  sed -i -e "s| init=[^ ]*||g" "${BOOT_MOUNTPOINT}"/cmdline.txt
}

add_init() {
  remove_init
  add_to_cmdline_txt "init=${1}"
}

finish_and_reboot() {
  [ -z "${BOOT_MOUNTPOINT}" ] && BOOT_MOUNTPOINT=$(find_boot_mount_point)
  umount "${BOOT_MOUNTPOINT}"
  mount / -o remount,ro
  sync
  reboot -f
}
