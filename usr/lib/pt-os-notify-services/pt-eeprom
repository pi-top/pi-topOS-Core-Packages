#!/bin/bash
###############################################################
#                Unofficial 'Bash strict mode'                #
# http://redsymbol.net/articles/unofficial-bash-strict-mode/  #
###############################################################
set -euo pipefail
IFS=$'\n\t'
###############################################################

show_notification() {
  /usr/bin/notify-send \
    --expire-time=0 \
    --icon=system-error \
    "Raspberry Pi EEPROM Requires Reconfiguration" \
    "Your Raspberry Pi's board revision requires a reconfiguration to be compatible with pi-top [4]. Please apply the configuration update and reboot." \
    --action="Update and Reboot:env SUDO_ASKPASS=/usr/lib/pt-os-notify-services/pwdpte.sh sudo -A /usr/lib/pt-os-notify-services/pt-eeprom -f && env SUDO_ASKPASS=/usr/lib/pt-os-notify-services/pwdpte.sh sudo -A /sbin/reboot"
}

is_pi_top_4() {
  if [[ "$(pi-top devices hub --name-only)" == "pi-top [4]" ]]; then
    return 0
  else
    return 1
  fi
}

is_root() {
  [ "${EUID}" -eq 0 ] && return 0
  return 1
}

is_raspberry_pi_4() {
  [[ ! -f /proc/device-tree/model ]] && return 1
  model="$(tr -d '\0' </proc/device-tree/model)"
  [[ "${model}" != *"Raspberry Pi 4"* ]] && return 1
  return 0
}

board_revision_requires_patched_eeprom() {
  # Board revision 1.4 onwards does not require patching
  # https://www.raspberrypi.org/documentation/hardware/raspberrypi/revision-codes/README.md
  if grep -q "^Revision\s*:\s*[ 123][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]1[4-9a-fA-F]$" /proc/cpuinfo; then
    return 1
  else
    return 0
  fi
}

eeprom_needs_patching() {
  grep -q "WAKE_ON_GPIO=1" "${bootloader_config_file}" && return 0
  grep -q "POWER_OFF_ON_HALT=0" "${bootloader_config_file}" && return 0
  return 1
}

read_eeprom_settings() {
  rpi-eeprom-config --out "${bootloader_config_file}"
}

force_conf_entry() {
  local field="${1}"
  local value="${2}"
  local file="${3}"

  # Delete existing entries
  sed -i "/^${field}=/d" "${file}"
  # Append forced entry
  echo "${field}=${value}" >>"${file}"
}

set_eeprom_installation_directory() {
  bootfs_entry="/boot"
  [[ -d "/boot/.recovery" ]] && bootfs_entry="/boot/.recovery"
  force_conf_entry BOOTFS "${bootfs_entry}" "/etc/default/rpi-eeprom-update"
}

patch_eeprom() {
  echo "Patching EEPROM configuration"
  force_conf_entry WAKE_ON_GPIO 0 "${tmp_dir}/boot.conf"
  force_conf_entry POWER_OFF_ON_HALT 1 "${tmp_dir}/boot.conf"
  echo "Applying EEPROM configuration"
  rpi-eeprom-config --apply "${tmp_dir}/boot.conf"
}

if ! is_raspberry_pi_4; then
  echo "Not on a Raspberry Pi 4, skipping..."
  exit 0
fi

if ! is_root; then
  echo "Must run as root, exiting..."
  exit 1
fi

force=
while getopts "f" OPTION; do
  case $OPTION in
  f) force="1" ;;
  *)
    echo "usage: $0 [-f]" >&2
    exit 1
    ;;
  esac
done

tmp_dir="$(mktemp -d)"
bootloader_config_file="${tmp_dir}/boot.conf"

set_eeprom_installation_directory

if board_revision_requires_patched_eeprom; then
  echo "Board revision requires patched EEPROM"
  read_eeprom_settings
  if [ -n "${force}" ]; then
    patch_eeprom
  elif eeprom_needs_patching; then
    show_notification
  else
    echo "EEPROM does not require patching - doing nothing"
  fi
else
  echo "Board revision does not require patched EEPROM - doing nothing"
fi

rm -rf "${tmp_dir}"

exit 0
